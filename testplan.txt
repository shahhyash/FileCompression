Our code was tested rigorously through randomly generated test data. The script grader.py creates a randomly generated text file with a random number of characters in the file between 1 and N. We change the parameter N to be a value in {10, 100, 1000, 10000, 100000, 1000000}. The script randomly generates an ascii character and writes it to the text file and an answer file until N characters are written. Then the script cleans and makes the fileCompressor executable. The script runs fileCompressor to build the HuffmanCodebook, then compress the file, then decompress the file. The decompressed file is checked against the answers file for accuracy. Running this script for 10 minutes continuously (of varying N), our simulation shows only passing testcases.

The HuffmanCodebook, AVL tree, and heap were checked on small test cases by hand to make sure that they worked properly. The AVL tree was printed with traverse(root) after elements were added to ensure that each rotation was performed in the correct instance. 
